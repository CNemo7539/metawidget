<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<groupId>org.metawidget</groupId>
	<artifactId>metawidget-parent</artifactId>
	<version>1.25-SNAPSHOT</version>
	<packaging>pom</packaging>

	<modelVersion>4.0.0</modelVersion>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<!-- Artifact versions. Avoid using &lt;dependencyManagement&gt; for dependencies because: -->

		<!-- 1. Maven always downloads *all* &lt;dependencyManagement&gt; dependencies even if they -->
		<!-- are not needed (ie. you are just building *one* of the examples). See: -->
		<!-- http://maven.40175.n5.nabble.com/Maven-unnecessarily-downloads-all-dependencies-from-parent-POM-s-lt-dependencyManagement-gt-td4392388.html -->

		<!-- 2. All &lt;dependencyManagement&gt; dependencies must be marked 'provided' for our -->
		<!-- purposes, which handicaps Maven's automatic 'dragging in' of related dependencies -->
		
		<android.version>1.5_r4</android.version>
		<ant.version>1.8.2</ant.version>
		<appframework.version>1.0.3</appframework.version>
		<bcel.version>5.1</bcel.version>
		<beansbinding.version>1.2.1</beansbinding.version>
		<commons.beanutils.version>1.8.3</commons.beanutils.version>
		<commons.jexl.version>1.1</commons.jexl.version>
		<commons.logging.version>1.1.1</commons.logging.version>
		<displaytag.version>1.2</displaytag.version>
		<eclipse.databinding.version>1.2.0</eclipse.databinding.version>
		<eclipse.equinox.version>3.6.0.v20100503</eclipse.equinox.version>
		<!-- 3.4+ avoid the swt.dll loading problem -->
		<eclipse.swt.version>3.6.0-v3659</eclipse.swt.version>
		<el.version>2.2.1-b03</el.version>
		<!-- Note: ExtGWT 2.2.3 needed for GWT 2.2.0 -->
		<extgwt.version>2.2.3</extgwt.version>
		<facelets.version>1.1.14</facelets.version>
		<!-- Groovy 1.7 requires JDK 1.6 for java.awt.Dialog.ModalExclusionType -->
		<groovy.version>1.6.9</groovy.version>
		<gwt.version>2.2.0</gwt.version>
		<hibernate.validator.version>3.1.0.GA</hibernate.validator.version>
		<ibm.icu.version>3.4.5</ibm.icu.version>
		<icefaces.version>1.8.2</icefaces.version>
		<javassist.version>3.1</javassist.version>
		<jboss.javaee6.version>1.0.0.Final</jboss.javaee6.version>
		<!-- We build against 1.5, but we test against 1.4 -->
		<jdk14.path>/j2sdk1.4.2_16</jdk14.path>
		<jgoodies.validation.version>2.0.1</jgoodies.validation.version>
		<jpa.version>1.0</jpa.version>
		<jsp.version>2.0</jsp.version>
		<jstl.version>1.1.2</jstl.version>
		<!-- JDK 1.4 needs JUnit 3.x -->
		<junit3.version>3.8.2</junit3.version>
		<junit4.version>4.8.2</junit4.version>
		<miglayout.version>3.7.3</miglayout.version>
		<!-- We build against the latest Mojarra, but we test against 1.2.x -->
		<mojarra1.version>1.2_15</mojarra1.version>
		<mojarra2.version>2.1.0</mojarra2.version>
		<myfaces11.version>1.1.6</myfaces11.version>
		<myfaces12.version>1.2.10</myfaces12.version>
		<myfaces2.version>2.0.5</myfaces2.version>
		<oval.version>1.32</oval.version>
		<primefaces.version>2.2</primefaces.version>
		<!-- We build against the latest RichFaces, but we test against 3.3.3.Final -->
		<richfaces31.version>3.1.6.GA</richfaces31.version>
		<richfaces333.version>3.3.3.Final</richfaces333.version>
		<richfaces4.version>4.0.0.Final</richfaces4.version>
		<scala.version>2.7.2</scala.version>
		<servlet.version>2.4</servlet.version>
		<spring.version>2.5.6</spring.version>
		<struts.version>1.2.9</struts.version>
		<swingworker.version>1.1</swingworker.version>
		<swingx.version>1.0</swingx.version>
		<taglibs.standard.version>1.1.2</taglibs.standard.version>
		<tomahawk.version>1.1.9</tomahawk.version>
		<!-- Appears to be the highest version that works with tomcat-maven-plugin 1.1 -->
		<tomcat.version>6.0.29</tomcat.version>

	</properties>

	<name>Metawidget</name>
	<description>
		Metawidget is a smart User Interface widget that populates itself, at runtime,
		with UI components to match the properties of your business objects.
	</description>

	<url>http://metawidget.org</url>
	<issueManagement>
		<system>Tracker Sourceforge</system>
		<url>https://sourceforge.net/tracker/?group_id=208482</url>
	</issueManagement>
	<licenses>
		<license>
			<name>GNU Library or Lesser General Public License (LGPL)</name>
			<url>http://www.gnu.org/licenses/lgpl.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://metawidget.svn.sourceforge.net/svnroot/metawidget</url>
		<connection>scm:svn:https://metawidget.svn.sourceforge.net/svnroot/metawidget</connection>
	</scm>

	<prerequisites>
		<maven>3.0.0</maven>
	</prerequisites>

	<developers>
		<developer>
			<id>rkennard</id>
			<name>Richard Kennard</name>
			<roles>
				<role>Founder</role>
			</roles>
			<timezone>+10</timezone>
		</developer>
	</developers>

	<modules>
		<module>documentation/reference</module>
		<module>modules</module>
		<!-- Not under 'modules' until http://jira.codehaus.org/browse/MNG-2805 can suppress maven-source-plugin -->
		<module>modules/all</module>
		<module>examples</module>
		<module>integration-tests</module>
		<!-- Run separately until MJAVADOC-311 <module>website</module> -->
	</modules>

	<profiles>

		<!-- Debug/Optimized profiles -->

		<profile>
			<id>debug</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- Note: this must be 'maven.compile' (no 'r') -->
				<maven.compile.debug>true</maven.compile.debug>
				<!-- Note: these must be 'maven.compiler' (with an 'r') -->
				<maven.compiler.debuglevel>lines,vars,source</maven.compiler.debuglevel>
				<maven.compiler.optimize>true</maven.compiler.optimize>
				<compile.addMavenDescriptor>true</compile.addMavenDescriptor>
			</properties>
		</profile>

		<profile>
			<id>optimized</id>
			<activation>
				<property>
					<name>optimized</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<!-- Putting these under maven-compiler-plugin didn't seem to work: http://jira.codehaus.org/browse/MCOMPILER-114 -->
				<!-- Note: this must be 'maven.compile' (no 'r') -->
				<maven.compile.debug>false</maven.compile.debug>
				<!-- Note: these must be 'maven.compiler' (with an 'r') -->
				<maven.compiler.debuglevel>none</maven.compiler.debuglevel>
				<maven.compiler.optimize>true</maven.compiler.optimize>
				<compile.addMavenDescriptor>false</compile.addMavenDescriptor>
			</properties>
		</profile>

		<!-- Tomcat/Jetty profiles -->

		<profile>
			<id>appserver-default</id>
			<activation>
				<property>
					<name>!appserver</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.codehaus.mojo</groupId>
							<artifactId>tomcat-maven-plugin</artifactId>
							<executions>
								<execution>
									<id>start-tomcat</id>
									<phase>pre-integration-test</phase>
									<goals>
										<goal>run-war</goal>
									</goals>
								</execution>
								<execution>
									<id>stop-tomcat</id>
									<phase>post-integration-test</phase>
									<goals>
										<goal>shutdown</goal>
									</goals>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>appserver-jetty</id>
			<activation>
				<property>
					<name>appserver</name>
					<value>jetty</value>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.mortbay.jetty</groupId>
							<artifactId>jetty-maven-plugin</artifactId>
							<executions>
								<execution>
									<id>start-jetty</id>
									<phase>pre-integration-test</phase>
									<goals>
										<goal>run-war</goal>
									</goals>
								</execution>
								<execution>
									<id>stop-jetty</id>
									<phase>post-integration-test</phase>
									<goals>
										<goal>stop</goal>
									</goals>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

	</profiles>

	<!-- Dependencies (all scopes are 'provided' so that metawidget-all.jar has no mandatory dependencies) -->

	<repositories>
		<!-- Try Central Repository first. It will resolve most things -->
		<repository>
			<id>maven-central</id>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
		<!-- Try specialized repositories next. It it slow to check (and fail) on each of these -->
		<repository>
			<id>jboss-public-repository</id>
			<url>http://repository.jboss.org/nexus/content/groups/public</url>
		</repository>
		<repository>
			<id>prime-repo</id>
			<url>http://repository.prime.com.tr</url>
		</repository>
		<repository>
			<id>java.net-maven2-repository</id>
			<url>http://download.java.net/maven/2</url>
		</repository>
		<repository>
			<id>local-repository</id>
			<url>https://metawidget.svn.sourceforge.net/svnroot/metawidget/trunk/repository</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<!-- Try Central Repository first. It will resolve most things -->
		<pluginRepository>
			<id>maven-central</id>
			<url>http://repo1.maven.org/maven2</url>
		</pluginRepository>
		<!-- Try specialized repositories next. It it slow to check (and fail) on each of these -->
		<pluginRepository>
			<id>codehaus</id>
			<url>http://snapshots.repository.codehaus.org</url>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.4.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.3.1</version>
					<configuration>
						<archive>
							<addMavenDescriptor>${compile.addMavenDescriptor}</addMavenDescriptor>
							<manifestEntries>
								<Built-By />
								<Specification-Title>Metawidget</Specification-Title>
								<Specification-Version>${project.version}</Specification-Version>
								<Implementation-Title>${project.artifactId}</Implementation-Title>
							</manifestEntries>
						</archive>
						<excludes>
							<exclude>**/package-info.class</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>1.4</version>
					<executions>
						<execution>
							<goals>
								<goal>shade</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.gmaven</groupId>
					<artifactId>gmaven-plugin</artifactId>
					<version>1.3</version>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.1.1</version>
					<configuration>
						<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
						<dependentWarExcludes>WEB-INF/lib/**</dependentWarExcludes>
						<!-- So that we get metawidget-all.jar in example WARs -->
						<outputFileNameMapping>@{artifactId}@.@{extension}@</outputFileNameMapping>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
						</archive>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>gwt-maven-plugin</artifactId>
					<version>2.2.0</version>
					<configuration>
						<mode>htmlunit</mode>
						<webappDirectory>${basedir}/war</webappDirectory>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
								<goal>test</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>com.jayway.maven.plugins.android.generation2</groupId>
					<artifactId>maven-android-plugin</artifactId>
					<version>2.9.0-beta-2</version>
					<configuration>
						<androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
						<assetsDirectory>${project.basedir}/assets</assetsDirectory>
						<resourceDirectory>${project.basedir}/res</resourceDirectory>
						<sdk>
							<path>/android-sdk-windows</path>
							<platform>3</platform>
						</sdk>
						<deleteConflictingFiles>true</deleteConflictingFiles>
						<undeployBeforeDeploy>true</undeployBeforeDeploy>
					</configuration>
					<extensions>true</extensions>
				</plugin>
				<plugin>
					<groupId>org.scala-tools</groupId>
					<artifactId>maven-scala-plugin</artifactId>
					<version>2.14.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.2</version>
					<configuration>
						<outputDirectory>${project.build.directory}/lib</outputDirectory>
						<excludeTransitive>true</excludeTransitive>
						<includeScope>runtime</includeScope>
						<stripVersion>true</stripVersion>
					</configuration>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Testing -->

				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>7.4.0.v20110414</version>
					<configuration>
						<daemon>true</daemon>
						<webApp>target/${project.build.finalName}.war</webApp>
						<webAppConfig>
							<contextPath>/${project.artifactId}</contextPath>
						</webAppConfig>
						<connectors>
							<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
								<port>8081</port>
								<maxIdleTime>60000</maxIdleTime>
							</connector>
						</connectors>
						<stopPort>8801</stopPort>
						<stopKey>stop</stopKey>
					</configuration>
					<!-- These executions are profile dependent -->
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>tomcat-maven-plugin</artifactId>
					<version>1.1</version>
					<dependencies>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>catalina</artifactId>
							<version>${tomcat.version}</version>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>catalina-ha</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>tribes</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>el-api</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>jasper</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>jasper-el</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>jasper-jdt</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>jsp-api</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>servlet-api</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>coyote</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
						<dependency>
							<groupId>org.apache.tomcat</groupId>
							<artifactId>dbcp</artifactId>
							<version>${tomcat.version}</version>
							<scope>runtime</scope>
						</dependency>
					</dependencies>
					<configuration>
						<fork>true</fork>
						<port>8081</port>
						<warFile>target/${project.build.finalName}.war</warFile>
					</configuration>
					<!-- These executions are profile dependent -->
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>webtest-maven-plugin</artifactId>
					<!-- 0.7.0-SNAPSHOT and above do not run penguincolony-faces -->
					<version>0.6.9-SNAPSHOT</version>
					<executions>
						<execution>
							<id>jetty-integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>test</goal>
							</goals>
							<configuration>
								<host>localhost</host>
								<port>8081</port>
								<basepath>${project.artifactId}</basepath>
								<resultpath>target/webtest-results</resultpath>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- Documentation -->

				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.7</version>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.5</version>
				</plugin>
				<plugin>
					<groupId>net.sourceforge.maven-taglib</groupId>
					<artifactId>maven-taglib-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<!-- Distribution -->

				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.6</version>
				</plugin>
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>
				<plugin>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>1.2</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<inherited>false</inherited>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/bin.xml</descriptor>
						<descriptor>src/main/assembly/examples.xml</descriptor>
						<descriptor>src/main/assembly/src.xml</descriptor>
					</descriptors>
					<finalName>metawidget-${project.version}</finalName>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<extensions>
			<!-- Enable the use of SSH for &lt;distributionManagement&gt; -->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh</artifactId>
				<version>1.0-beta-7</version>
			</extension>
		</extensions>
	</build>

	<distributionManagement>
		<repository>
			<id>jboss-releases-repository</id>
			<url>https://repository.jboss.org/nexus/service/local/staging/deploy/maven2</url>
			<!-- username/password defined in MAVEN_HOME/conf/settings.xml -->
		</repository>
		<snapshotRepository>
			<id>jboss-snapshots-repository</id>
			<url>https://repository.jboss.org/nexus/content/repositories/snapshots</url>
			<!-- username/password defined in MAVEN_HOME/conf/settings.xml -->
		</snapshotRepository>
	</distributionManagement>

</project>